# -*- coding: utf-8 -*-
"""SIMPLE_OBJECT_DETECTION_YOLOv8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16JIXpL4T2GVv-1JHi4qfKgmFfJzyTgwh

#**Simple Object Detection, Image Segmentation, and Classification with YOLOv8**

In this project, a YOLOv8 model was trained to detect and identify objects such as people, buses, backpacks, and traffic lights. Unlike traditional image classification, this project involves object detection that classifies and locates objects within images using bounding boxes. Trained on an urban scene dataset, the model accurately recognizes these objects in real-time, making it suitable for applications in autonomous driving, surveillance, and smart city solutions. The model's high speed and accuracy were further demonstrated by successfully applying it to video footage, effectively locating buses and traffic lights in dynamic environments.
"""

from google.colab import drive
drive.mount('/content/drive')

"""#Before running the script, please ensure that you have set the runtime to GPU.

#**Import the Required Library**
"""

from IPython.display import Image

"""#**Install Ultralytics Library**"""

!pip install ultralytics==8.0.0

"""#**Check Whether the GPU is Available or Not**"""

import torch

torch.cuda.is_available()

torch.__version__

"""#**Object Detection**

#**Run Object Detection on a Sample Image**
"""

!yolo task=detect mode=predict model=yolov8s.pt source='/content/image1.jpg'

"""#**Display the Output Image**"""

Image('/content/runs/detect/predict4/image1.jpg')

"""#**To save the Bounding Box Information set save_txt=True**"""

!yolo task=detect mode=predict model=yolov8s.pt source='/content/image1.jpg' save_txt=True

"""#**Display the Output Image**"""

Image('/content/runs/detect/predict5/image1.jpg')

"""#**To save the "Crop Object"  set save_crop=True**"""

!yolo task=detect mode=predict model=yolov8s.pt source='/content/image1.jpg' save_crop=True

"""#**Display the Output Image**"""

Image('/content/runs/detect/predict6/crops/person/image18.jpg')

"""#**To remove the confidence values and labels, we will use hide_labels and hide_conf Flags**"""

!yolo task=detect mode=predict model=yolov8s.pt source='/content/image1.jpg' hide_labels=True hide_conf=True

"""#**Display the Output Image**"""

Image('/content/runs/detect/predict7/image1.jpg')

"""#**Run Object Detection on Videos**"""

!yolo task=detect mode=predict model=yolov8s.pt source='/content/demo.mp4'

"""#**Display the Demo Video**"""

!rm "/content/result_compressed.mp4"

from IPython.display import HTML
from base64 import b64encode
import os

# Input video path
save_path = '/content/runs/detect/predict9/demo.mp4'

# Compressed video path
compressed_path = "/content/result_compressed.mp4"

os.system(f"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}")

# Show video
mp4 = open(compressed_path,'rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)

"""#**Image Segmentation**"""

!yolo task=segment mode=predict model=yolov8s-seg.pt source='/content/image1.jpg'

"""#**Dispay the Output Image**"""

Image('/content/runs/segment/predict/image1.jpg')

"""#**Hide Labels and Confidence Value**

So the segmentation part attributes each object to a specific colour
"""

!yolo task=segment mode=predict model=yolov8s-seg.pt source='/content/image1.jpg'  hide_labels=True hide_conf=True

"""#**Display the Output Image**"""

Image('/content/runs/segment/predict2/image1.jpg')

"""#**Run Segmentation on Video**"""

!yolo task=segment mode=predict model=yolov8s-seg.pt source='/content/demo.mp4'

"""#**Display the Output Video for Segmentation**"""

!rm  "/content/result_compressed.mp4"

from IPython.display import HTML
from base64 import b64encode
import os

# Input video path
save_path = '/content/runs/segment/predict3/demo.mp4'

# Compressed video path
compressed_path = "/content/result_compressed.mp4"

os.system(f"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}")

# Show video
mp4 = open(compressed_path,'rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)

"""#**Export Model in ONNX Format**

#**Detection**
"""

!yolo task=detect mode=export model=yolov8s.pt format=onnx

"""#**Segmentation**"""

!yolo task=segment mode=export model=yolov8s-seg.pt format=onnx

"""#**To Do All this in Python Instead of Command Line**

#**For Image**
"""

from ultralytics import YOLO

#Initialize YOLO with the model name
model = YOLO("yolov8m.pt")
#Predict Method Takes all the parameters of the Command Line Interface
model.predict(source='/content/image1.jpg',  save=True, conf=0.5,save_txt=True)

"""#**Display the Output Image**"""

Image('/content/runs/detect/predict6/image1.jpg')

"""#**For Video**"""

#Initialize YOLO with the model name
model = YOLO("yolov8m.pt")
#Predict Method Takes all the parameters of the Command Line Interface
model.predict(source='/content/demo.mp4',  save=False, conf=0.5, save_txt = False)